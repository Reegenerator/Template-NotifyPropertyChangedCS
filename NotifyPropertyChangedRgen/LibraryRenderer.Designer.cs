// -------------------------------------------------------
// Automatically generated with Kodeo's Reegenerator for NON-COMMERCIAL USE
// Generator: RgenTemplate (internal)
// Generation date: 2014-06-01 06:02
// Generated by: GTS-DEV\Pranolo
//-------------------------------------------------------
namespace NotifyPropertyChangedRgen
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reegenerator", "2.0.6.0")]
    [Kodeo.Reegenerator.Generators.TemplateDisplayAttribute(DisplayName="LibraryRenderer", Description="Render library for NotifyPropertyChanged", HideInDialog=true)]
    public partial class LibraryRenderer : CodeRendererEx
    {
        
        /// <summary>
        ///Renders the code as defined in the source script file.
        ///</summary>
        ///<returns></returns>
        public override Kodeo.Reegenerator.Generators.RenderResults Render()
        {
            this.Output.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing Syste" +
                    "m.Linq.Expressions;\r\nnamespace ");
            this.Output.Write( Namespace);
            this.Output.Write("{\r\n\tinternal interface  ");
            this.Output.Write(INotifierName );
            this.Output.Write(" : System.ComponentModel.INotifyPropertyChanged\r\n\t{\r\n\t\tvoid Notify(string propert" +
                    "yName);\r\n\t}\r\n\r\n\tinternal static class ");
            this.Output.Write( ClassName );
            this.Output.Write("\r\n\t{\r\n\t\tpublic static void NotifyChanged(this INotifier notifier, string property" +
                    "Name)\r\n\t\t{\r\n\t\t\tnotifier.Notify(propertyName);\r\n\t\t}\r\n\t   \r\n\t\t");
 if (IsNet45) { 
            this.Output.Write(@"
		public void NotifyCallerAndPropertiesChanged(this [CallerMemberName] string callerPropertyName, params System.Linq.Expressions.Expression<Func<ThisClass, object>>[] propExpressions)
		{
			NotifyChanged(callerPropertyName);
			NotifyChanged(propExpressions);
		}

		public void NotifyThisChanged(this INotifier notifier, [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
		{
			notifier.Notify(propertyName);
		}

		");
 } 
            this.Output.Write("\r\n\r\n\r\n\r\n\t\tpublic static bool SetPropertyAndNotify<T>(this INotifier notifier, ref" +
                    " T field, T newValue,");
 if (IsNet45) { 
            this.Output.Write("<CallerMemberName>");
 } 
            this.Output.Write(" string propertyName = null)\r\n\t\t{\r\n\t\t\tif (EqualityComparer<T>.Default.Equals(fiel" +
                    "d, newValue))\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tfield = newValue;\r\n\t\t\tnotifier." +
                    "NotifyChanged(propertyName);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\r\n\t\tpublic static void Not" +
                    "ifyChanged<T>(this INotifier notifier, System.Linq.Expressions.Expression<Func<T" +
                    ", object>> memberExpr)\r\n\t\t{\r\n\t\t\tnotifier.Notify(ExprToString(memberExpr));\r\n\t\t}\r" +
                    "\n\r\n\t\tpublic static void NotifyChanged<T>(this INotifier notifier, params System." +
                    "Linq.Expressions.Expression<Func<T, object>>[] propExpressions)\r\n\t\t{\r\n\t\t\tforeach" +
                    " (var p in propExpressions)\r\n\t\t\t{\r\n\t\t\t\tnotifier.NotifyChanged(p);\r\n\t\t\t}\r\n\t\t}\r\n\r\n" +
                    "\t\tpublic static void NotifyChanged(this INotifier notifier, params string[] prop" +
                    "s)\r\n\t\t{\r\n\t\t\tforeach (var p in props)\r\n\t\t\t{\r\n\t\t\t\tnotifier.NotifyChanged(p);\r\n\t\t\t}" +
                    "\r\n\t\t}\r\n\r\n\t#region ExprToString\r\n\r\n\t\tpublic static string[] ExprsToString<T>(para" +
                    "ms Expression<Func<T, object>>[] exprs)\r\n\t\t{\r\n\r\n\t\t\tvar strings = (\r\n\t\t\t\tfrom x i" +
                    "n exprs\r\n\t\t\t\tselect ((LambdaExpression)x).ExprToString()).ToArray();\r\n\t\t\treturn " +
                    "strings;\r\n\t\t}\r\n\r\n\t\tpublic static string ExprToString<T, T2>(this Expression<Func" +
                    "<T, T2>> expr)\r\n\t\t{\r\n\t\t\treturn ((LambdaExpression)expr).ExprToString();\r\n\t\t}\r\n\r\n" +
                    "\t\tpublic static string ExprToString(this LambdaExpression memberExpr)\r\n\t\t{\r\n\t\t\ti" +
                    "f (memberExpr == null)\r\n\t\t\t{\r\n\t\t\t\treturn \"\";\r\n\t\t\t}\r\n\t\t\tSystem.Linq.Expressions.E" +
                    "xpression currExpr = null;\r\n\t\t\t//when T2 is object, the expression will be wrapp" +
                    "ed in UnaryExpression of Convert{}\r\n\t\t\tvar convertedToObject = memberExpr.Body a" +
                    "s UnaryExpression;\r\n\t\t\tif (convertedToObject != null)\r\n\t\t\t{\r\n\t\t\t\t//unwrap\r\n\t\t\t\tc" +
                    "urrExpr = convertedToObject.Operand;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tcurrExpr = member" +
                    "Expr.Body;\r\n\t\t\t}\r\n\t\t\tswitch (currExpr.NodeType)\r\n\t\t\t{\r\n\t\t\t\tcase ExpressionType.M" +
                    "emberAccess:\r\n\t\t\t\t\tvar ex = (MemberExpression)currExpr;\r\n\t\t\t\t\treturn ex.Member.N" +
                    "ame;\r\n\t\t\t}\r\n\r\n\t\t\tthrow new Exception(\"Expression ToString() extension only proce" +
                    "sses MemberExpression\");\r\n\t\t}\r\n\r\n\t#endregion\r\n\t}\r\n}\r\n\r\n\r\n\r\n");
            this.Output.WriteLine();
            return new Kodeo.Reegenerator.Generators.RenderResults(this.Output.ToString());
        }
    }
}
